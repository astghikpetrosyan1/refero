import { Action } from 'redux';
import { ThunkDispatch } from 'redux-thunk';
import { Coding, QuestionnaireItem, Attachment, QuestionnaireResponseItem, Quantity } from '../types/fhir';
import { GlobalState } from '../reducers';
import { Path } from '../util/refero-core';
export declare type NEW_VALUE = 'refero/NEW_VALUE';
export declare const NEW_VALUE: NEW_VALUE;
export declare type NEW_CODINGSTRING_VALUE = 'refero/NEW_CODINGSTRING_VALUE';
export declare const NEW_CODINGSTRING_VALUE: NEW_CODINGSTRING_VALUE;
export declare type REMOVE_CODINGSTRING_VALUE = 'refero/REMOVE_CODINGSTRING_VALUE';
export declare const REMOVE_CODINGSTRING_VALUE: REMOVE_CODINGSTRING_VALUE;
export declare const REMOVE_CODING_VALUE = "refero/REMOVE_CODING_VALUE";
export declare type ADD_REPEAT_ITEM = 'refero/ADD_REPEAT_ITEM';
export declare const ADD_REPEAT_ITEM: ADD_REPEAT_ITEM;
export declare type DELETE_REPEAT_ITEM = 'refero/DELETE_REPEAT_ITEM';
export declare const DELETE_REPEAT_ITEM: DELETE_REPEAT_ITEM;
export declare type REMOVE_ATTACHMENT_VALUE = 'refero/REMOVE_ATTACHMENT_VALUE';
export declare const REMOVE_ATTACHMENT_VALUE: REMOVE_ATTACHMENT_VALUE;
export interface NewValueAction extends Action {
    itemPath?: Array<Path>;
    parentPath?: Array<Path>;
    valueBoolean?: boolean;
    valueAttachment?: Attachment;
    valueString?: string;
    valueDecimal?: number;
    valueInteger?: number;
    valueDate?: string;
    valueDateTime?: string;
    valueTime?: string;
    valueCoding?: Coding;
    valueQuantity?: Quantity;
    item?: QuestionnaireItem | undefined;
    responseItems?: Array<QuestionnaireResponseItem> | undefined;
    multipleAnswers?: boolean;
}
export declare function newAttachment(itemPath: Array<Path>, value: Attachment, item: QuestionnaireItem | undefined, multipleAnswers?: boolean): NewValueAction;
export declare function newAttachmentAsync(itemPath: Array<Path>, value: Attachment, item: QuestionnaireItem | undefined, multipleAnswers?: boolean): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function removeAttachment(itemPath: Array<Path>, value: Attachment, item: QuestionnaireItem | undefined): NewValueAction;
export declare function removeAttachmentAsync(itemPath: Array<Path>, value: Attachment, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newBooleanValue(itemPath: Array<Path>, value: boolean, item: QuestionnaireItem | undefined): NewValueAction;
export declare function newBooleanValueAsync(itemPath: Array<Path>, value: boolean, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newCodingValue(itemPath: Array<Path>, value: Coding, item: QuestionnaireItem | undefined, multipleAnswers?: boolean): NewValueAction;
export declare function newCodingValueAsync(itemPath: Array<Path>, value: Coding, item: QuestionnaireItem | undefined, multipleAnswers?: boolean): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newCodingStringValue(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined, multipleAnswers?: boolean): NewValueAction;
export declare function newCodingStringValueAsync(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined, multipleAnswers?: boolean): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function removeCodingStringValue(itemPath: Array<Path>, item: QuestionnaireItem | undefined): NewValueAction;
export declare function removeCodingStringValueAsync(itemPath: Array<Path>, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newQuantityValue(itemPath: Array<Path>, value: Quantity, item: QuestionnaireItem | undefined): NewValueAction;
export declare function newQuantityValueAsync(itemPath: Array<Path>, value: Quantity, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function removeCodingValue(itemPath: Array<Path>, value: Coding, item: QuestionnaireItem | undefined): NewValueAction;
export declare function removeCodingValueAsync(itemPath: Array<Path>, value: Coding, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newDecimalValue(itemPath: Array<Path>, value: number, item: QuestionnaireItem | undefined): NewValueAction;
export declare function newDecimalValueAsync(itemPath: Array<Path>, value: number, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newIntegerValue(itemPath: Array<Path>, value: number, item: QuestionnaireItem | undefined): NewValueAction;
export declare function newIntegerValueAsync(itemPath: Array<Path>, value: number, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newStringValue(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined): NewValueAction;
export declare function newStringValueAsync(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newDateValue(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined): NewValueAction;
export declare function newDateValueAsync(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newTimeValue(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined): NewValueAction;
export declare function newTimeValueAsync(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function newDateTimeValue(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined): NewValueAction;
export declare function newDateTimeValueAsync(itemPath: Array<Path>, value: string, item: QuestionnaireItem | undefined): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
export declare function addRepeatItem(parentPath: Array<Path> | undefined, item: QuestionnaireItem, responseItems: Array<QuestionnaireResponseItem> | undefined): NewValueAction;
export declare function deleteRepeatItem(itemPath: Array<Path>, item: QuestionnaireItem): NewValueAction;
export declare function deleteRepeatItemAsync(itemPath: Array<Path>, item: QuestionnaireItem): (dispatch: ThunkDispatch<GlobalState, void, NewValueAction>, getState: () => GlobalState) => Promise<GlobalState>;
